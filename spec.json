{
  "nio/JWTCreate": {
    "version": "0.1.0",
    "description": "generate a JWT token encrypted with the selected algorithm",
    "categories": [
      "Web Data"
    ],
    "properties": {
      "key": {
        "title": "JWT Secret",
        "type": "StringType",
        "description": "The secret used to encrypt the token.",
        "default": "[[JWT_SECRET]]"
      },
      "algorithm": {
        "title": "Hashing Algorithm",
        "type": "EnumType",
        "description": "The type of encryption used to create the token",
        "default": "HS256"
      },
      "exp_minutes": {
        "title": "Valid For Minutes (exp claim)",
        "type": "IntType",
        "description": "The TTL for the token, in minutes, based on UTC time",
        "default": 60
      },
      "claims": {
        "title": "Claims",
        "type": "Type",
        "description": "Payload body as `{key: value}` pairs",
        "default": "{{ $.to_dict() }}"
      },
      "enrich": {
        "title": "Signal Enrichment",
        "type": "ObjectType",
        "description": "enable signal enrichment",
        "default": {
          "exclude_existing": true
        }
      }
    },
    "inputs": {
      "default": {
        "description": "any list of signals"
      }
    },
    "outputs": {
      "default": {
        "description": "One outgoing signal containing a single object with token, error, and message keys"
      }
    },
    "commands": {}
  },
  "nio/JWTValidate": {
    "version": "0.1.0",
    "description": "evaluate a JWT token and determines whether it is valid, both in terms of being able to decrypt it, as well as if it is expired based on the `exp` claim",
    "categories": [
      "Web Data"
    ],
    "properties": {
      "key": {
        "title": "JWT Secret",
        "type": "StringType",
        "description": "The secret used to encrypt the token.",
        "default": "[[JWT_SECRET]]"
      },
      "algorithm": {
        "title": "Hashing Algorithm",
        "type": "EnumType",
        "description": "The type of encryption used to create the token",
        "default": "HS256"
      },
      "input": {
        "title": "Token Value",
        "type": "StringType",
        "description": "The attribute that holds the token value",
        "default": "token"
      },
      "validate_expiration": {
        "title": "Validate Expires Claim",
        "type": "BoolType",
        "description": "Validate the token's `exp` claim as expired or not",
        "default": true
      },
      "enrich": {
        "title": "Signal Enrichment",
        "type": "ObjectType",
        "description": "enable signal enrichment",
        "default": {
          "enrich_field": "",
          "exclude_existing": true
        }
      }
    },
    "inputs": {
      "default": {
        "description": "any list of signals"
      }
    },
    "outputs": {
      "default": {
        "description": "One outgoing signal containing a single object with token, error, and message keys"
      }
    },
    "commands": {}
  },
  "nio/JWTRefresh": {
    "version": "0.1.0",
    "description": "takes a valid JWT token and returns a new token with an updated `exp` timestamp",
    "categories": [
      "Web Data"
    ],
    "properties": {
      "key": {
        "title": "JWT Secret",
        "type": "StringType",
        "description": "The secret used to encrypt the token.",
        "default": "[[JWT_SECRET]]"
      },
      "algorithm": {
        "title": "Hashing Algorithm",
        "type": "EnumType",
        "description": "The type of encryption used to create the token",
        "default": "HS256"
      },
      "input": {
        "title": "Token Value",
        "type": "StringType",
        "description": "The attribute that holds the token value",
        "default": "{{ $headers.get('Authorization').split()[1] }}"
      },
      "exp_minutes": {
        "title": "Valid For Minutes (exp claim)",
        "type": "IntType",
        "description": "The TTL for the token, in minutes, based on UTC time.",
        "default": 60
      },
      "enrich": {
        "title": "Signal Enrichment",
        "type": "ObjectType",
        "description": "enable signal enrichment",
        "default": {
          "enrich_field": "",
          "exclude_existing": true
        }
      }
    },
    "inputs": {
      "default": {
        "description": "any list of signals"
      }
    },
    "outputs": {
      "default": {
        "description": "One outgoing signal containing a single object with token, error, and message keys"
      }
    },
    "commands": {}
  }
}
